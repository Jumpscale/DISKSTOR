#%RAML 1.0
title: Network Object Store
version: v0.1.0
mediaType:  application/json

types:
  Payload:
    description: Key and data to store in NOS.
    properties:
      key:
        type: string
        description: Key of the Payload
      data:
        type: file
        maxLength: 1048576
        required: true
        description: Data to store. Max size is 1MB. Base64 encoded string.
  AclEntry:
    description: Access control entry for the reservation
    properties:
      secret:
        type: string
        description: Secret for which ACL is set.
      acl:
        type: string
        description: ACL settings. Can be a combination of letters R - read, W - write, D - deleate, A - admin.

/nos:
  displayName: Network Object Store
  get:
    displayName: Instance status
    description: Instance status
    responses:
      200:
        body:
          application/json:
            properties:
              status:
                type: string
                description: [active, error, full]
            example:
              status: active
  /reserve:
    post:
      displayName: Reserve space
      description: Make a reservation for specific amount of storage in the NOS
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of reserver.
            reservationId:
              type: string
              required: false
              description: Unique id (upto 16 chars) which identifies the reservation. If not passed will be autogenerated by server.
            reservationAdminSecret:
              type: string
              required: false
              description: Secret to control the reservation. If not set - reservation is publicly available.
            size:
              type: integer
              required: true
              description: Size of reservation in megabytes.
            expirationEpoch:
              type: integer
              required: false
              description: All data removed after expiration date. Epoh format.
          examples:
            Regular reservation, reservationId generated by server and returned:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              size: 100
            Private reservation with expiration:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              reservationAdminSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              size: 50
              expirationEpoch: 1521532065
            Public reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: MyPublicRes1
              size: 300
      responses:
        200:
          description: Reservation successfull
          body:
            application/json:
              properties:
                reservationId:
                  type: string
                  description: reservationId passed in parameters or generated by the server if absent in parameters
              example:
                reservationId: D9kdMquM0ElYvnQ3
        409:
          description: ReservationId is not unique.
        413:
          description: Not enough space available.
  /unreserve:
    post:
      displayName: Unreserve space
      description: Unreserve space. ALL DATA WILL BE DESTROYED.
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            reservationAdminSecret:
              type: string
              required: false
              description: reservationAdminSecret set on reservation.
          examples:
            Unreserve private reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              reservationAdminSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
            Unreserve public reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: MyPublicRes1
      responses:
        200:
          description: Reservation deleted.
        403:
          description: Reseration does not exists or reservationAdminSecret is incorrect.
  /put:
    post:
      displayName: Put data into storage
      description: Put data into storage
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with W access level to the specific reservation. Pass empty string or ignore if reservation is public.
            key:
              type: string
              required: true
              description: Key for the data. If key already exists, data overwritten and consumers list will be updated.
            data:
              type: file
              maxLength: 1048576
              required: true
              description: Data to store. Max size is 1MB. Base64 encoded string.
            consumers:
              type: string[]
              required: false
              description: List of consumer IDs. If empty or not passed, current requesterUID will be added.
          examples:
            Simple put to private reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              key: EFBS-537
              data: LongData...GoesHere
            Put to public reservation marked for multiple consumers:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: MyPublicRes1
              key: PUB-1004
              data: LongData...GoesHere
              consumers:
                - 69845524-08c5-4870-a52e-b2878c67d779
                - c80ed846-2bb0-46a9-8552-556e1d902431
                - 89d66e5e-9e3a-43e3-bcc0-9bcff6416493
      responses:
        200:
          description: Operation successfull
        403:
          description: reservationId is invalid or dataSecret is incorrect.
        413:
          description: Not enough space in reservation.
  /puts:
    post:
      displayName: Put multiple objects to storage.
      description: Put multiple objects to storage.
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with W access level to the specific reservation. Pass empty string or ignore if reservation is public.
            payload:
              type: Payload[]
              required: true
              description: Array of Payload (key+data) to store in NOS.
            consumers:
              type: string[]
              required: false
              description: List of consumer IDs. If empty or not passed, current requesterUID will be added. Same consumers set for all payloads passed.
          examples:
            Simple put to private reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              payload:
                -
                  key: EFBS-537
                  data: LongData1...GoesHere
                -
                  key: EFBS-538
                  data: LongData2...GoesHere
                -
                  key: EFBS-539
                  data: LongData3...GoesHere
      responses:
        200:
          description: Operation successfull
        403:
          description: reservationId is invalid or dataSecret is incorrect.
        413:
          description: Not enough space in reservation.
  /get:
    post:
      displayName: Get object from NOS
      description: Get object from NOS
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with R access level to the specific reservation. Pass empty string or ignore if reservation is public.
            key:
              type: string
              required: true
              description: Data key.
            verify:
              type: boolean
              required: false
              description: Verify data. If passed true, method uses crc to compare with existing data and returns true/false instead of actual data.
            crc:
               type: string
               required: false
               description: CRC to compare compare with existing data.
          examples:
            Regular get for public data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              key: EFBS-537
            Regular get for private data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              key: EFBS-537
            Private data verification request:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              key: EFBS-537
              verify: true
              crc: 03938ba0
      responses:
        200:
          description: Returns data or crc verification
          body:
            application/json:
              type: string
              description: Data or CRC verification result.
              examples:
                Regular get request: "LongData1...GoesHere"
                Key not exists response: ""
                CRC check request: "true"
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /gets:
    post:
      displayName: Get multiple objects from NOS
      description: Get multiple objects from NOS
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with R access level to the specific reservation. Pass empty string or ignore if reservation is public.
            keys:
              type: string[]
              required: true
              description: Array of data keys.
            verify:
              type: boolean
              required: false
              description: Verify data. If passed true, method uses crc to compare with existing data and returns true/false instead of actual data.
            crcArray:
               type: string[]
               required: false
               description: Arrays of CRC codes corresponding to passed keys to compare compare with existing data.
          examples:
            Regular get for public data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
            Regular get for private data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
            Private data verification request:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
              verify: true
              crcArray:
                - 03938ba0
                - 0c280ac4
                - 5b22776b
                - c0764cbe
      responses:
        200:
          description: Returns data or crc verification
          body:
            application/json:
              type: string[]
              description: Data or CRC verification result.
              examples:
                Regular get request:
                  - "LongData1...GoesHere"
                  - "LongData2...GoesHere"
                  - "LongData3...GoesHere"
                  - "LongData4...GoesHere"
                Some of the key not exists response:
                  - ""
                  - "LongData2...GoesHere"
                  - ""
                  - "LongData4...GoesHere"
                CRC check request:
                  - "true"
                  - "true"
                  - "true"
                  - "true"
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /list:
    post:
      displayName: List keys in the reservation
      description: List keys in the reservation
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with R access level to the specific reservation. Pass empty string or ignore if reservation is public.
          examples:
            List for public reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
            List for private reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
      responses:
        200:
          description: Returns list of keys in the reservation.
          body:
            application/json:
              type: string[]
              description: List of the keys in the reservation.
              example:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /delete:
    post:
      displayName: Delete object from NOS.
      description: Delete object from NOS. Requester removed from consumers list. If no consumers left, object is marked for deletion.
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with D access level to the specific reservation. Pass empty string or ignore if reservation is public.
            key:
              type: string
              required: true
              description: Key for the data to delete.
          examples:
            Delete (remove myself from consumers list) public data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              key: EFBS-537
            Delete (remove myself from consumers list) for private data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              key: EFBS-537
      responses:
        200:
          description: Operation successfull
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /deletes:
    post:
      displayName: Delete multiple objects from NOS.
      description: Delete multiple objects from NOS. Requester removed from consumers list. If no consumers left, objects is marked for deletion.
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with D access level to the specific reservation. Pass empty string or ignore if reservation is public.
            keys:
              type: string[]
              required: true
              description: Keys for the data to delete.
          examples:
            Delete (remove myself from consumers list) public data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
            Delete (remove myself from consumers list) for private data:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
      responses:
        200:
          description: Operation successfull
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /exist:
    post:
      displayName: Check existance of the object in NOS.
      description: Check existance of the object in NOS.
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with R access level to the specific reservation. Pass empty string or ignore if reservation is public.
            key:
              type: string
              required: true
              description: Key for the data to check.
          examples:
            Check existance on public reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              key: EFBS-537
            Check existance on private reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              key: EFBS-537
      responses:
        200:
          description: Operation successfull
          body:
            application/json:
              type: boolean
              description: True if object exists.
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /exists:
    post:
      displayName: Check existance of multiple objects in NOS.
      description: Check existance of multiple objects in NOS.
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with R access level to the specific reservation. Pass empty string or ignore if reservation is public.
            keys:
              type: string[]
              required: true
              description: Keys for the objects to check.
          examples:
            Check existance on public reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
            Check existance on private reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
      responses:
        200:
          description: Operation successfull
          body:
            application/json:
              type: boolean[]
              description: List of boolean values corresponding passed keys in the same order.
              example:
                - true
                - true
                - false
                - true
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /existsMark:
    post:
      displayName: Mark keys as existing. Used to create book keys in advance for buld upload.
      description: PMark keys as existing. Used to create book keys in advance for buld uploa
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with W access level to the specific reservation. Pass empty string or ignore if reservation is public.
            keys:
              type: string[]
              required: true
              description: Array of keys to mark as existing.
            consumers:
              type: string[]
              required: false
              description: List of consumer IDs. If empty or not passed, current requesterUID will be added. Same consumers set for all payloads passed.
          examples:
            Simple put to private reservation:
              requesterUID: 6a6f686e646f656a756e696f7274776f
              reservationId: D9kdMquM0ElYvnQ3
              dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
              keys:
                - EFBS-537
                - EFBS-538
                - EFBS-539
                - EFBS-540
      responses:
        200:
          description: Operation successfull
          body:
            application/json:
              type: string[]
              description: List of keys which did not existed yet.
              example:
                - EFBS-537
                - EFBS-538
                - EFBS-540
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /info:
    post:
      displayName: Get infromation about reservation. Accessible with A rights for reservation.
      description: Get infromation about reservation. Accessible with A rights for reservation.
      body:
        application/json:
          properties:
            requesterUID:
              type: string
              required: true
              description: Identity of requeter.
            reservationId:
              type: string
              required: true
              description: Unique ID of the reservation.
            dataSecret:
              type: string
              required: false
              description: Secret with A access level to the specific reservation. Pass empty string or ignore if reservation is public.
          example:
            requesterUID: 6a6f686e646f656a756e696f7274776f
            reservationId: D9kdMquM0ElYvnQ3
            dataSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
      responses:
        200:
          description: Infromation fetched successfully.
          body:
            application/json:
              properties:
                spaceReserved:
                  type: integer
                  required: true
                  description: Space reserved for this reservation, in MB.
                spaceUsed:
                  type: integer
                  required: true
                  description: Space used in this reservation, in MB.
                expirationEpoch:
                  type: integer
                  required: false
                  description: Expiration date in Epoh format
                acls:
                  type: AclEntry[]
                  required: true
                  description: List of ACL entries for the specific reservation.
                nRequestsPerH:
                  type: number
                  required: true
                  description: Number of requests per Hour for the specific reservation.
                nObjestsStored:
                  type: integer
                  required: true
                  description: Number of objects stored in specific reservation.
              examples:
                Reservation with expirationEpoch:
                  spaceReserved: 512
                  spaceUsed: 34
                  expirationEpoch: 1521532065
                  acls:
                    - secret: "MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o="
                      acl: "RWDA"
                    - secret: MyPublicRes1
                      acl: RW
                  nRequestsPerH: 86
                  nObjestsStored: 572
        403:
          description: reservationId is invalid or dataSecret is incorrect.
  /aclSet:
  /actDelete:
