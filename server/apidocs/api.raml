#%RAML 1.0
title: Network Object Store
version: v0.1.0
mediaType:  application/json
baseUri: https://127.0.0.1:5000

traits:
  withRequesterUIDHeader:
    headers:
      RequesterUID:
        type: string
        required: true
        description: Identity of sender.
        example: 6a6f686e646f656a756e696f7274776f
  withDataSecretHeader:
    headers:
      DataSecret:
        type: string
        required: true
        description: Data secret with proper access to the reservation.
        example: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
    responses:
      403:
        description: DataSecret is invalid.

types:
  AclEntry:
    description: Access control entry for the reservation
    properties:
      dataSecret:
        type: string
        description: Secret for which ACL is set.
      acl:
        type: string
        description: ACL settings. Can be a combination of letters R - read, W - write, D - deleate, A - admin.

/reservations:
  post:
    displayName: Make Reservation
    description: Make a reservation for specific amount of storage in the NOS.
    is: [ withRequesterUIDHeader ]
    body:
      application/json:
        properties:
          reservationId:
            type: string
            required: false
            description: Unique id (upto 16 chars) which identifies the reservation. If not passed will be autogenerated by server.
          reservationAdminSecret:
            type: string
            required: false
            description: Secret to control the reservation. If not set - reservation is publicly available.
          size:
            type: integer
            required: true
            description: Size of reservation in megabytes.
          expirationEpoch:
            type: integer
            required: false
            description: All data removed after expiration date. Epoh format.
        examples:
          Regular reservation, reservationId generated by server and returned:
            reservationAdminSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
            size: 100
          Private reservation with expiration:
            reservationId: D9kdMquM0ElYvnQ3
            reservationAdminSecret: MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o=
            size: 50
            expirationEpoch: 1521532065
          Public reservation:
            reservationId: MyPublicRes1
            size: 300
    responses:
      200:
        description: Reservation successful
        body:
          application/json:
            properties:
              reservationId:
                type: string
                description: reservationId passed in parameters or generated by the server if absent in parameters
            example:
              reservationId: D9kdMquM0ElYvnQ3
      409:
        description: ReservationId is not unique.
      413:
        description: Not enough space available.
  /{reservationId}:
    get:
      displayName: Get Reservation Info
      description: Get infromation about reservation. Accessible with A (admin) rights for reservation.
      is: [withRequesterUIDHeader, withDataSecretHeader]
      responses:
        200:
          description: Infromation fetched successfuly.
          body:
            application/json:
              properties:
                spaceReserved:
                  type: integer
                  required: true
                  description: Space reserved for this reservation, in MB.
                spaceUsed:
                  type: integer
                  required: true
                  description: Space used in this reservation, in MB.
                expirationEpoch:
                  type: integer
                  required: false
                  description: Expiration date in Epoh format
                acls:
                  type: AclEntry[]
                  required: true
                  description: List of ACL entries for the specific reservation.
                nRequestsPerH:
                  type: number
                  required: true
                  description: Number of requests per Hour for the specific reservation.
                nObjestsStored:
                  type: integer
                  required: true
                  description: Number of objects stored in specific reservation.
              examples:
                Reservation with expirationEpoch:
                  spaceReserved: 512
                  spaceUsed: 34
                  expirationEpoch: 1521532065
                  acls:
                    - dataSecret: "MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o="
                      acl: "RWDA"
                    - dataSecret: MyPublicRes1
                      acl: RW
                  nRequestsPerH: 86
                  nObjestsStored: 572
    delete:
      displayName: Delete Reservation
      description: Unreserve space. ALL DATA WILL BE DESTROYED.
      is: [ withRequesterUIDHeader, withDataSecretHeader ]
      responses:
        200:
          description: Reservation deleted.
    /objects:
      post:
        displayName: Put Objects
        description: Put one or multiple objects into storage.
        is: [ withRequesterUIDHeader, withDataSecretHeader ]
        body:
          multipart/form-data:
            properties:
              keys:
                type: string[]
                required: true
                description: Keys for the data. If keys already exists, data overwritten and consumers list will be updated.
              data:
                type: file[]
                required: true
                description: Data to store. Max size is 1MB. Base64 encoded string.
              consumers:
                type: string[]
                required: false
                description: List of consumer IDs (requesterUID). If empty or not passed, current requesterUID will be added.
            examples:
              Simple put to private reservation:
                keys:
                  - EFBS-537
                  - EFBS-538
                  - EFBS-539
                data:
                  - LongData1...GoesHere
                  - LongData2...GoesHere
                  - LongData3...GoesHere
                consumers:
                  - 69845524-08c5-4870-a52e-b2878c67d779
                  - c80ed846-2bb0-46a9-8552-556e1d902431
                  - 89d66e5e-9e3a-43e3-bcc0-9bcff6416493
        responses:
          200:
            description: Operation successful
          413:
            description: Not enough space in reservation.
      get:
        displayName: Get Multiple Objects
        description: Get Multiple Objects from NOS or check CRC.
        is: [ withRequesterUIDHeader, withDataSecretHeader ]
        queryParameters:
          keys:
            type: string[]
            required: true
            description: Array of data keys.
            example:
              - EFBS-537
              - EFBS-538
              - EFBS-539
              - EFBS-540
          verify:
            type: boolean
            required: false
            description: Verify data. If passed true, method uses crc to compare with existing data and returns true/false instead of actual data.
          crcArray:
             type: string[]
             required: false
             description: Arrays of CRC codes corresponding to passed keys to compare compare with existing data.
             example:
               - 03938ba0
               - 0c280ac4
               - 5b22776b
               - c0764cbe
        responses:
          200:
            description: Returns data or crc verification
            body:
              application/json:
                type: string[]
                description: Data or CRC verification result.
                examples:
                  Regular get request:
                    - "LongData1...GoesHere"
                    - "LongData2...GoesHere"
                    - "LongData3...GoesHere"
                    - "LongData4...GoesHere"
                  Some of the key not exists response:
                    - ""
                    - "LongData2...GoesHere"
                    - ""
                    - "LongData4...GoesHere"
                  CRC check request:
                    - "true"
                    - "true"
                    - "true"
                    - "true"
      delete:
        displayName: Delete Multiple Objects
        description: Delete multiple objects from NOS. Requester removed from consumers list. If no consumers left, objects is marked for deletion.
        is: [ withRequesterUIDHeader, withDataSecretHeader ]
        queryParameters:
          keys:
            type: string[]
            required: true
            description: Keys for the data to delete.
            example:
              - EFBS-537
              - EFBS-538
              - EFBS-539
              - EFBS-540
        responses:
          200:
            description: Operation successful
      head:
        displayName: Check Existance For Multiple Objects
        description: Check existance of multiple objects in NOS.
        is: [ withRequesterUIDHeader, withDataSecretHeader ]
        body:
          multipart/form-data:
            properties:
              keys:
                type: string[]
                required: true
                description: Keys for the objects to check.
                example:
                  - EFBS-537
                  - EFBS-538
                  - EFBS-539
                  - EFBS-540
        responses:
          200:
            description: Operation successful
            body:
              application/json:
                type: boolean[]
                description: List of boolean values corresponding passed keys in the same order.
                example:
                  - true
                  - true
                  - false
                  - true
      /mark:
        post:
          displayName: Mark Keys As Existing
          description: PMark keys as existing. Used to create book keys in advance for bulk upload.
          is: [ withRequesterUIDHeader, withDataSecretHeader ]
          body:
            application/json:
              properties:
                keys:
                  type: string[]
                  required: true
                  description: Array of keys to mark as existing.
                  example:
                    - EFBS-537
                    - EFBS-538
                    - EFBS-539
                    - EFBS-540
                consumers:
                  type: string[]
                  required: false
                  description: List of consumer IDs. If empty or not passed, current requesterUID will be added. Same consumers set for all payloads passed.
                  example:
                    - 69845524-08c5-4870-a52e-b2878c67d779
                    - c80ed846-2bb0-46a9-8552-556e1d902431
                    - 89d66e5e-9e3a-43e3-bcc0-9bcff6416493
          responses:
            200:
              description: Operation successful
              body:
                application/json:
                  type: string[]
                  description: List of keys which did not existed yet.
                  example:
                    - EFBS-537
                    - EFBS-538
                    - EFBS-540
      /{key}:
        get:
          displayName: Get Object
          description: Get object from NOS
          is: [ withRequesterUIDHeader, withDataSecretHeader ]
          queryParameters:
            verify:
              type: boolean
              required: false
              description: Verify data. If passed true, method uses crc to compare with existing data and returns true/false instead of actual data.
              example: true
            crc:
               type: string
               required: false
               description: CRC to compare compare with existing data.
               example: 03938ba0
          responses:
            200:
              description: Data or CRC verification result. Returns empty string if key does not exists.
              body:
                application/json:
                  type: string
                  description: Data or CRC verification result. Returns empty string if key does not exists.
                  examples:
                    Regular get request: "LongData1_GoesHere"
                    CRC check request: "true"
        delete:
          displayName: Delete Object
          description: Delete object from NOS. Requester removed from consumers list. If no consumers left, object is marked for deletion.
          is: [ withRequesterUIDHeader, withDataSecretHeader ]
          responses:
            200:
              description: Operation successful
        head:
          displayName: Check Object Existance
          description: Check existance of the object in NOS.
          is: [ withRequesterUIDHeader, withDataSecretHeader ]
          responses:
            200:
              description: Operation successful
              body:
                application/json:
                  type: boolean
                  description: True if object exists.
    /keys:
      get:
        displayName: List Keys
        description: List keys in the reservation
        is: [ withRequesterUIDHeader, withDataSecretHeader ]
        responses:
          200:
            description: Returns list of keys in the reservation.
            body:
              application/json:
                type: string[]
                description: List of the keys in the reservation.
                example:
                  - EFBS-537
                  - EFBS-538
                  - EFBS-539
                  - EFBS-540
    /aclEntries:
      post:
        displayName: Create Or Update ACL
        description: Post new Access Control entry or edit existing one.
        is: [ withRequesterUIDHeader, withDataSecretHeader ]
        body:
          application/json:
            properties:
              aclEntry:
                type: AclEntry
                required: true
                description: ACL entry
                example:
                  dataSecret: MyPublicRes1
                  acl: RW
        responses:
          200:
            description: ACL Entry posted successfuly.
      get:
        displayName: Get ACL List
        description: Get full ACL list for current reservation. Requester should have A (admin) rights.
        is: [ withRequesterUIDHeader, withDataSecretHeader ]
        responses:
          200:
            description: List of ACL entries.
            body:
              application/json:
                type: AclEntry[]
                description: List of ACL entries.
                example:
                  - dataSecret: "MqydbtJK/kdlJJ7RjW+5aS25ZlVKWvcWoLY2QXbEr6o="
                    acl: "RWDA"
                  - dataSecret: MyPublicRes1
                    acl: RWs
      /{dataSecret}:
        delete:
          displayName: Delete ACL Entry
          description: Delete data secret from ACL.
          is: [ withRequesterUIDHeader, withDataSecretHeader ]
          responses:
            200:
              description: ACL Entry was deleted.
